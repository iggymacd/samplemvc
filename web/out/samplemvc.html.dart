// Auto-generated from samplemvc.html.
// DO NOT EDIT.

library samplemvc_html;

import 'dart:html' as autogenerated;
import 'package:web_components/web_components.dart' as autogenerated;

import 'dart:html';

import '../model.dart';

import '../playing_cards.dart';

import 'package:web_components/web_components.dart';

import 'deck.html.dart';


// Original code
bool newGame = true;
			main() {
			
			}
      Deck get dealerDeck{
       return app.decks['dealer'];
      }
      Deck get discardDeck{
       return app.decks['discard'];
      }
      Deck get roundDeck{
       return app.decks['round'];
      }
      Deck get northDeck{
       return app.decks['north'];
      }
      Deck get southDeck{
       return app.decks['south'];
      }
      Deck get eastDeck{
       return app.decks['east'];
      }
			Deck get westDeck{
			 return app.decks['west'];
			}
			void startGame(e){
				newGame = false;
				app.startGame();
			}
		

// Additional generated code
/** Create the views and bind them to models. */
void init_autogenerated() {
  // Create view.
  var _root = new autogenerated.DocumentFragment.html(_INITIAL_PAGE);

  autogenerated.DivElement _container;
  
  autogenerated.UnknownElement __e0;
  
  List<autogenerated.WatcherDisposer> _stoppers1;
  
  autogenerated.Node _endPosition__e0;
  
  bool _isVisible__e0 = false;
  
  autogenerated.ButtonElement _startGame;
  
  autogenerated.EventListener _listener_startGame_click_2_1;
  
  autogenerated.DivElement _dealerDeck;
  
  autogenerated.UnknownElement __e1;
  
  autogenerated.DivElement _northDeck;
  
  autogenerated.UnknownElement __e2;
  
  autogenerated.DivElement _discardDeck;
  
  autogenerated.UnknownElement __e3;
  
  autogenerated.DivElement _westDeck;
  
  autogenerated.UnknownElement __e4;
  
  autogenerated.DivElement _round;
  
  autogenerated.UnknownElement __e5;
  
  autogenerated.DivElement _eastDeck;
  
  autogenerated.UnknownElement __e6;
  
  autogenerated.DivElement _southDeck;
  
  autogenerated.UnknownElement __e7;
  


  // Initialize fields.
  _container = _root.query('#container');
  __e0 = _container.query('#__e-0');
  _stoppers1 = [];
  _dealerDeck = _container.query('#dealerDeck');
  __e1 = _dealerDeck.query('#__e-1');
  var component__e1 = new CardDeckComponent.forElement(__e1);
  component__e1.deck = dealerDeck;
  component__e1.created_autogenerated();
  component__e1.created();
  component__e1.composeChildren();
  _northDeck = _container.query('#northDeck');
  __e2 = _northDeck.query('#__e-2');
  var component__e2 = new CardDeckComponent.forElement(__e2);
  component__e2.deck = northDeck;
  component__e2.created_autogenerated();
  component__e2.created();
  component__e2.composeChildren();
  _discardDeck = _container.query('#discardDeck');
  __e3 = _discardDeck.query('#__e-3');
  var component__e3 = new CardDeckComponent.forElement(__e3);
  component__e3.deck = discardDeck;
  component__e3.created_autogenerated();
  component__e3.created();
  component__e3.composeChildren();
  _westDeck = _container.query('#westDeck');
  __e4 = _westDeck.query('#__e-4');
  var component__e4 = new CardDeckComponent.forElement(__e4);
  component__e4.deck = westDeck;
  component__e4.created_autogenerated();
  component__e4.created();
  component__e4.composeChildren();
  _round = _container.query('#round');
  __e5 = _round.query('#__e-5');
  var component__e5 = new CardDeckComponent.forElement(__e5);
  component__e5.deck = roundDeck;
  component__e5.created_autogenerated();
  component__e5.created();
  component__e5.composeChildren();
  _eastDeck = _container.query('#eastDeck');
  __e6 = _eastDeck.query('#__e-6');
  var component__e6 = new CardDeckComponent.forElement(__e6);
  component__e6.deck = eastDeck;
  component__e6.created_autogenerated();
  component__e6.created();
  component__e6.composeChildren();
  _southDeck = _container.query('#southDeck');
  __e7 = _southDeck.query('#__e-7');
  var component__e7 = new CardDeckComponent.forElement(__e7);
  component__e7.deck = southDeck;
  component__e7.created_autogenerated();
  component__e7.created();
  component__e7.composeChildren();
  

  // Attach model to views.
  _endPosition__e0 = __e0;
  
  _stoppers1.add(autogenerated.watchAndInvoke(() => newGame, (__e) {
    bool showNow = __e.newValue;
    if (_isVisible__e0 && !showNow) {
      _isVisible__e0 = false;
      
      _startGame.on.click.remove(_listener_startGame_click_2_1);
      _listener_startGame_click_2_1 = null;
      
      _startGame = null;
      
      _endPosition__e0 = autogenerated.removeNodes(__e0, _endPosition__e0);
      
    } else if (!_isVisible__e0 && showNow) {
      
      _isVisible__e0 = true;
      
      _startGame = new autogenerated.Element.html('<button id="start-game">\n		        Start Game!\n		      </button>');
      
      autogenerated.insertAllBefore(__e0.parent, __e0.nextNode,
      
      [_endPosition__e0 = _startGame]);
      
      _listener_startGame_click_2_1 = (__e) {
        startGame(__e);
        autogenerated.dispatch();
      };
      _startGame.on.click.add(_listener_startGame_click_2_1);
      
    }
  }));
  
  __e1.xtag.inserted();
  
  __e1.xtag.inserted_autogenerated();
  
  __e2.xtag.inserted();
  
  __e2.xtag.inserted_autogenerated();
  
  __e3.xtag.inserted();
  
  __e3.xtag.inserted_autogenerated();
  
  __e4.xtag.inserted();
  
  __e4.xtag.inserted_autogenerated();
  
  __e5.xtag.inserted();
  
  __e5.xtag.inserted_autogenerated();
  
  __e6.xtag.inserted();
  
  __e6.xtag.inserted_autogenerated();
  
  __e7.xtag.inserted();
  
  __e7.xtag.inserted_autogenerated();
  


  // Attach view to the document.
  autogenerated.document.body.nodes.add(_root);
  _root = autogenerated.document.body;
}

final String _INITIAL_PAGE = '''

    <h1>Sample Card Game</h1>    
    <p>Hello Tarabish Players</p>    
    <div id="container"> 
        <template id="__e-0" style="display:none"></template>
    
        <template>
      <div class="row"> 
            <div id="dealerDeck" class="well span3">
            <x-card-deck id="__e-1"></x-card-deck>
            </div>
            <div id="northDeck" class="well span3 offset1">
            <x-card-deck id="__e-2"></x-card-deck>
            </div>
            <div id="discardDeck" class="well span3 offset1">
            <x-card-deck id="__e-3"></x-card-deck>
            </div>
      </div>
      <div class="row"> 
            <div id="westDeck" class="well span3">
            <x-card-deck id="__e-4"></x-card-deck>
            </div>
            <div id="round" class="well span3 offset1">
            <x-card-deck id="__e-5"></x-card-deck>
            </div>
            <div id="eastDeck" class="well span3 offset1">
            <x-card-deck id="__e-6"></x-card-deck>
            </div>
      </div>
      <div class="row"> 
            <div id="southDeck" class="well span3 offset4">
            <x-card-deck id="__e-7"></x-card-deck>
            </div>
      </div>
        </template>
    </div>
		
  

''';
